name: CDK Deployments

on:
  workflow_dispatch:
    inputs:
      target_environment:
        description: 'Choose environment (staging or production)'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  deploy-staging:
    if: github.event.inputs.target_environment == 'staging'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Amazon Linux 2 container and build Go binary
        run: |
          docker run --rm -v "$PWD":/go/src/mentorship-app -w /go/src/mentorship-app amazonlinux:2 \
          bash -c "yum install -y golang zip && \
          GOOS=linux GOARCH=amd64 go build -o bootstrap ./handlers/s3/upload.go && \
          zip function.zip bootstrap"

      - name: Install CDK
        run: npm install -g aws-cdk

      - name: Synthesize the CDK stack
        run: cdk synth

      - name: Deploy Staging Stack
        run: |
          cdk deploy MentorshipAppBackendStagingStack --require-approval never
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy-production:
    if: github.event.inputs.target_environment == 'production'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Amazon Linux 2 container and build Go binary
        run: |
          docker run --rm -v "$PWD":/go/src/mentorship-app -w /go/src/mentorship-app amazonlinux:2 \
          bash -c "yum install -y golang zip && \
          GOOS=linux GOARCH=amd64 go build -o bootstrap ./handlers/s3/upload.go && \
          zip function.zip bootstrap"

      - name: Install CDK
        run: npm install -g aws-cdk

      - name: Synthesize the CDK stack
        run: cdk synth

      - name: Deploy Production Stack
        run: |
          cdk deploy MentorshipAppBackendProductionStack --require-approval never
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
