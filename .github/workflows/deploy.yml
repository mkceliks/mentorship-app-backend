name: CDK Deployments

on:
  workflow_dispatch:
    inputs:
      target_environment:
        description: 'Choose environment (staging or production)'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: us-east-1
      TARGET_ENV: ${{ github.event.inputs.target_environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build and Package Lambda Functions
        run: |
          docker pull amazonlinux:2
          mkdir -p output
          for main_file in $(find handlers -type f -name "main.go"); do
            dir=$(dirname "$main_file")
            function_name=$(basename "$dir")
            echo "Building Lambda function for $function_name"
            docker build --build-arg FUNCTION_NAME="$function_name" -t lambda-"$function_name" .
            container_id=$(docker create lambda-"$function_name")
            docker cp "$container_id:/app/output/${function_name}_function.zip" output/
            docker rm "$container_id"
          done
        shell: bash

      - name: Verify Lambda Packages
        run: |
          for main_file in $(find handlers -type f -name "main.go"); do
            function_name=$(basename "$(dirname "$main_file")")
            if [ ! -f output/${function_name}_function.zip ]; then
              echo "Error: ${function_name}_function.zip is missing."
              exit 1
            fi
          done

      - name: Install Node.js and CDK
        run: |
          curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
          sudo apt-get install -y nodejs
          npm install -g aws-cdk @aws-amplify/cli

      - name: Synthesize the CDK stack
        run: cdk synth --context environment=${{ env.TARGET_ENV }}

      - name: Deploy CDK Stack
        run: cdk deploy "mentorship-${{ env.TARGET_ENV }}" --require-approval never

      - name: Amplify Setup and Deployment
        run: |
          amplify pull --appId d3a95eikyeftzd --envName master --yes
          amplify push --yes
