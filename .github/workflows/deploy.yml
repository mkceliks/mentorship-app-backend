name: CDK Deployments

on:
  workflow_dispatch:
    inputs:
      target_environment:
        description: 'Choose environment (staging or production)'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Verify Directory Structure
        run: |
          echo "Listing project structure..."
          ls -R

      - name: Set up container and build binaries
        run: |
          mkdir -p build
          for dir in handlers/s3/*; do
            if [ -d "$dir" ]; then
              function_name=$(basename "$dir")
              docker run --rm -v "$PWD":/mentorship-app-backend -w /mentorship-app-backend/$dir amazonlinux:2 \
              bash -c "yum install -y zip golang && \
              GOOS=linux GOARCH=amd64 go build -o bootstrap main.go && \
              zip -j ../build/${function_name}.zip bootstrap"
            fi
          done
        shell: bash

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: lambda-functions
          path: build/*.zip

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: lambda-functions

      - name: Install CDK
        run: npm install -g aws-cdk

      - name: Synthesize the CDK stack
        run: cdk synth

      - name: Deploy to Selected Environment
        run: |
          if [ "${{ github.event.inputs.target_environment }}" == "staging" ]; then
            cdk deploy MentorshipAppBackendStagingStack --require-approval never
          elif [ "${{ github.event.inputs.target_environment }}" == "production" ]; then
            cdk deploy MentorshipAppBackendProductionStack --require-approval never
          fi
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
